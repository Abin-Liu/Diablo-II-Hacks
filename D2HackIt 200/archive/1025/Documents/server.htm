

<head>
</head>

<p align="center"><font face="Arial Black" size="4">The &quot;server&quot; API
Set</font></p>
<p><font face="Verdana" size="2">This API set encapsulates general game attribues and 
global operations. I will only list new API's that were added in D2Hackit 2.00. 
API's those exist since older versions of D2Hackit are assumed well known.</font></p> 
<p><font face="Verdana" size="2"><b>General Functions</b></font></p>
<ul>
  <li><a href="#GetPing"><font face="Verdana" size="2">server-&gt;GetPing</font></a></li>
  <li><font face="Verdana" size="2"><a href="#GetRealmName">server-&gt;GetRealmName</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetGameIP">server-&gt;GetGameIP</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetGameName">server-&gt;GetGameName</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetGamePassword">server-&gt;GetGamePassword</a></font></li>
  <li><a href="#GetGameDifficulty"><font face="Verdana" size="2">server-&gt;GetGameDifficulty</font></a></li>
  <li><a href="#GetD2WindowTitle"><font face="Verdana" size="2">server-&gt;GetD2WindowTitle</font></a></li>
  <li><a href="#GetInGameTime"><font face="Verdana" size="2">server-&gt;GetInGameTime</font></a></li>
  <li><a href="#IsGameReady"><font face="Verdana" size="2">server-&gt;IsGameReady</font></a></li>
  <li><a href="#GetModuleDirectory"><font face="Verdana" size="2">server-&gt;GetModuleDirectory</font></a></li>
  <li><a href="#IsClientLoaded"><font face="Verdana" size="2">server-&gt;IsClientLoaded</font></a></li>
  <li><a href="#WasD2HackitLoadedBeforeJoinGame"><font face="Verdana" size="2">server-&gt;WasD2HackitLoadedBeforeJoinGame</font></a></li>
</ul>
<p><font face="Verdana" size="2"><b>Inter-Module Communication</b></font></p>
<ul>
  <li><font face="Verdana" size="2"><a href="#QueryModuleData">server-&gt;QueryModuleData</a></font></li>
</ul>
<p><font face="Verdana" size="2"><b>Information Printing Functions</b></font></p>
<ul>
  <li><a href="#GameInfof"><font face="Verdana" size="2">server-&gt;GameInfof</font></a></li>
  <li><a href="#GameErrorf"><font face="Verdana" size="2">server-&gt;GameErrorf</font></a></li>
  <li><a href="#GameStringf"><font face="Verdana" size="2">server-&gt;GameStringf</font></a></li>
  <li><a href="#GameCommandf"><font face="Verdana" size="2">server-&gt;GameCommandf</font></a></li>
  <li><a href="#GamePrintPacket"><font face="Verdana" size="2">server-&gt;GamePrintPacket</font></a></li>
</ul>
<p><font face="Verdana" size="2"><b>Unit Functions</b></font></p>
<ul>
  <li><a href="#EnumUnit"><font face="Verdana" size="2">server-&gt;EnumUnits</font></a></li>
  <li><a href="#VerifyUnit"><font face="Verdana" size="2">server-&gt;VerifyUnit</font></a></li>
  <li><a href="#FindUnitByClassID"><font face="Verdana" size="2">server-&gt;FindUnitByClassID</font></a></li>
  <li><a href="#FindUnitByName"><font face="Verdana" size="2">server-&gt;FindUnitByName</font></a></li>
  <li><a href="#GetUnitPosition"><font face="Verdana" size="2">server-&gt;GetUnitPosition</font></a></li>
  <li><a href="#GetUnitName"><font face="Verdana" size="2">server-&gt;GetUnitName</font></a></li>
  <li><a href="#GetUnitOwnerID"><font face="Verdana" size="2">server-&gt;GetUnitOwnerID</font></a></li>
  <li><a href="#GetUnitClassID"><font face="Verdana" size="2">server-&gt;GetUnitClassID</font></a></li>
  <li><a href="#GetUnitHPPercent"><font face="Verdana" size="2">server-&gt;GetUnitHPPercent</font></a></li>
  <li><a href="#GetUnitStat"><font face="Verdana" size="2">server-&gt;GetUnitStat</font></a></li>
  <li><a href="#GetUnitAffection"><font face="Verdana" size="2">server-&gt;GetUnitAffection</font></a></li>
  <li><a href="#IsMercUnit"><font face="Verdana" size="2">server-&gt;IsMercUnit</font></a></li>
  <li><a href="#GetMonsterType"><font face="Verdana" size="2">server-&gt;GetMonsterType</font></a></li>
  <li><font face="Verdana" size="2"><a href="#GetMonsterAttributes">server-&gt;GetMonsterAttributes</a></font></li>
  <li><font size="2" face="Verdana"><a href="#EnumPresetUnits">server-&gt;EnumPresetUnits</a></font></li>
</ul>
<p><b><font size="2" face="Verdana">Misc Functions</font></b></p>
<ul>
  <li><font face="Verdana" size="2"><a href="#CalculateTeleportPath">server-&gt;CalculateTeleportPath</a></font></li>
  <li><font face="Verdana" size="2"><a href="#CalculateWalkPath">server-&gt;CalculateWalkPath</a></font></li>
  <li><font face="Verdana" size="2"><a href="#CreateCollisionMap">server-&gt;CreateCollisionMap</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetCollisionData">server-&gt;GetCollisionData</a></font></li>
  <li><a href="#GetAffectionName"><font face="Verdana" size="2">server-&gt;GetAffectionName</font></a></li>
  <li><a href="#AffectionIsAura"><font face="Verdana" size="2">server-&gt;AffectionIsAura</font></a></li>
  <li><a href="#GetDistance"><font face="Verdana" size="2">server-&gt;GetDistance</font></a></li>
  <li><a href="#SendKey"><font face="Verdana" size="2">server-&gt;SendKey</font></a></li>
  <li><font face="Verdana" size="2"><a href="#LeftClick">server-&gt;LeftClick</a></font></li>
  <li><font face="Verdana" size="2"><a href="#RightClick">server-&gt;RightClick</a></font></li>
  <li><a href="#GetSpellName"><font face="Verdana" size="2">server-&gt;GetSpellName</font></a></li>
  <li><a href="#GetMapName"><font face="Verdana" size="2">server-&gt;GetMapName</font></a></li>
  <li><a href="#MapIsTown"><font face="Verdana" size="2">server-&gt;MapIsTown</font></a></li>
  <li><a href="#GetTownMap"><font face="Verdana" size="2">server-&gt;GetTownMap</font></a></li>
  <li><a href="#GetActFromMap"><font face="Verdana" size="2">server-&gt;GetActFromMap</font></a></li>
  <li><font face="Verdana" size="2"><a href="#GetItemCode">server-&gt;GetItemCode</a></font></li>
  <li><a href="#GetItemSize"><font face="Verdana" size="2">server-&gt;GetItemSize</font></a></li>
  <li><font face="Verdana" size="2"><a href="#IsQuestItem">server-&gt;IsQuestItem</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetKeyName">server-&gt;GetKeyName</a></font></li>
  <li><a href="#GetTextSize"><font face="Verdana" size="2">server-&gt;GetTextSize</font></a></li>
  <li><a href="#GetScreenSize"><font face="Verdana" size="2">server-&gt;GetScreenSize</font></a></li>
  <li><a href="#ScreenToMapCoords"><font face="Verdana" size="2">server-&gt;ScreenToMapCoords</font></a></li>
  <li><a href="#MapToScreenCoords"><font face="Verdana" size="2">server-&gt;MapToScreenCoords</font></a></li>
  <li><a href="#GetMousePosition"><font face="Verdana" size="2">server-&gt;GetMousePosition</font></a></li>
  <li><font face="Verdana" size="2"><a href="#GetRandomPosition">server-&gt;GetRandomPosition</a></font></li>
  <li><font face="Verdana" size="2"><a href="#GetAngle">server-&gt;GetAngle</a></font></li>
</ul>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetPing"></a>DWORD GetPing();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns current ping value.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve current network ping value. Ping values are 
  used for detecting lag, the higher the ping, the worse the lag.</font></p> 
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetRealmName"></a>LPCSTR GetRealmName();</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If suceeded, the function returns pointer to 
  a null-terminated string which contains realm name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve realm name.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetGameIP"></a>LPCSTR GetGameIP();</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If suceeded, the function returns pointer to 
  a null-terminated string which contains game IP, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve current game server IP.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetGameName"></a>LPCSTR GetGameName();</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If suceeded, the function returns pointer to 
  a null-terminated string which contains game name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve current game name.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetGamePassword"></a>LPCSTR GetGamePassword();</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If suceeded, the function returns pointer to 
  a null-terminated string which contains game password, otherwise it returns 
  zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve current game password.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetModuleDirectory"></a>LPCSTR GetModuleDirectory();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returens pointer to a null-terminated
  string which contains module directory.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve directory where D2Hackit resides.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="IsClientLoaded"></a>BOOL IsClientLoaded(LPCSTR                   
</b><i>lpszClientName</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the d2h module was
  loaded, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpszClientName</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which contains
    name of the module to be examed. Note that module file extension, usually
    &quot;.d2h&quot;, shall not be included in <i>lpszClientName.</i></font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Determine whether a pariticular module was loaded.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GameInfof"></a>BOOL GameInfof(LPCSTR </b><i>lpszFormat</i><b>, ...);<br>                   
<a name="GameErrorf"></a>BOOL GameErrorf(LPCSTR </b><i>lpszFormat</i><b>, ...);<br>                   
<a name="GameStringf"></a>BOOL GameStringf(LPCSTR </b><i>lpszFormat</i><b>, ...);<br>                   
<a name="GameCommandf"></a>BOOL GameCommandf(LPCSTR </b><i>lpszFormat</i><b>, ...);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The functions return non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpszFormat</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which contains the
    format specifications.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">These functions will first format a given string, then
  call <i>GamePrintInfo</i>, <i>GamePrintError</i>, <i>GamePrintString</i>, <i>GameCommandLine</i>
  and pass in the formatted string. For example, if you want to print an integer
  value to the screen, you no longer need to declare a string buffer, then
  format the string using <i>sprintf</i>, then print it, instead, you can simply
  call <i>server-&gt;GameInfof(&quot;My value is: %d&quot;, nValue);</i> for
  significant code length reduction.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GamePrintPacket"></a>BOOL GamePrintPacket(BOOL                   
</b><i>bReceived</i><b>, const BYTE *</b><i>aPacket</i><b>, DWORD </b><i>aLen</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">bReceived</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies whether the packet is received or sent.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">aPacket</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Packet data block.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">aLen</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the packet length, in bytes.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Print packet contents to screen.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="IsGameReady"></a>BOOL IsGameReady();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the game is ready to be
  operated, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">When the player joins a game, the game doesn't become
  ready immediately, there will be a few seconds of delay until all necessary
  data are received or loaded by the game client. Your modules should not
  operate the player until the game is ready.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="WasD2HackitLoadedBeforeJoinGame"></a>BOOL WasD2HackitLoadedBeforeJoinGame();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the D2Hackit.dll was
  loaded before joining the game, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Some important data can only be received upon joining a
  game, so if D2Hackit.dll was not loaded before joining a game, some features
  may not work properly until the player joins a new game.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="EnumUnit"></a>BOOL EnumUnits(DWORD </b><i>dwUnitType</i><b>,                  
fnEnumUnitProc </b><i>lpfnEnumUnitProc</i><b>, LPARAM  
</b><i> lParam</i><b> = 0);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><font face="Verdana" size="2"><i>dwUnitType</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies type of the game units that are 
    to be enumerated. Please check <a href="definitions.htm#unittype">Unit Types</a> 
    for a complete list of game unit types.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpfnEnumUnitProc</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <i><a href="#fnEnumUnitProc">fnEnumUnitProc</a></i><b> </b>function 
    which will receive unit data.</font></p> 
  </blockquote>
  <p><i><font face="Verdana" size="2">lParam</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">A 32-bit application defined value.</font></p> 
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Enumerate all existing game units whose unit 
  type equal to <i>dwUnitType</i>.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="fnEnumUnitProc"></a>typedef BOOL (CALLBACK *</b><i>fnEnumUnitProc</i><b>)(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>, LPARAM </b><i>lParam</i><b>)</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Return zero to abort unit enumeration, return non-zero
  to continue.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lParam</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">A 32-bit application defined value.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Process each unit data passed from <i><a href="#EnumUnit">EnumUnit</a>.</i></font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="VerifyUnit"></a>BOOL VerifyUnit(LPCGAMEUNIT </b><i>lpUnit</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the unit data is valid,
  zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Verify an unit data, if the unit does not exist or is
  invalid, this function will fail.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="FindUnitByClassID"></a>BOOL FindUnitByClassID(DWORD                   
</b><i>dwUnitClassID</i><b>, DWORD </b><i>dwUnitType</i><b>, LPGAMEUNIT </b><i>lpBuffer</i><b>);</b></font></p> 
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the unit has been
  found, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">dwUnitClassID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies unit class ID. If there are multiple units 
    with same class ID, the first matched unit in the game unit chain will be used.</font></p> 
  </blockquote>
<p><font face="Verdana" size="2"><i>dwUnitType</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies type of the game unit that is to be 
    found. Please check <a href="definitions.htm#unittype">Unit Types</a>  
    for a complete list of game unit types.</font></p> 
  </blockquote>
  <p><i><font face="Verdana" size="2">lpBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct which will receive the unit's data if the unit is found.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Find a game unit whose class ID equals to <i>dwUnitClassID 
  </i>and unit type equals to <i>dwUnitType</i>. 
  Class ID's identify units' base types.</font></p> 
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="FindUnitByName"></a>BOOL FindUnitByName(LPCSTR                   
</b><i>lpszUnitName</i><b>, DWORD </b><i>dwUnitType</i><b>, LPGAMEUNIT </b><i>lpBuffer</i><b>);</b></font></p> 
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the unit has been
  found, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpszUnitName</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which contains 
    name of the unit to be found. If there are multiple units with same name, 
    the first matched unit in the game unit chain will be used.</font></p> 
  </blockquote>
<p><font face="Verdana" size="2"><i>dwUnitType</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies type of the game unit that is  
    to be found. Please check <a href="definitions.htm#unittype">Unit Types</a>  
    for a complete list of game unit types.</font></p> 
  </blockquote>
  <p><i><font face="Verdana" size="2">lpBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct which will receive the unit's data if the unit is found.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Find a game unit whose name matches <i>lpszUnitName 
  </i>and unit type equals to <i>dwUnitType</i>. 
  Unit names are case-insensitive.</font></p> 
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitPosition"></a>POINT GetUnitPosition(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns the unit's map position if the unit is found, otherwise 
  it returns {0,0}.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieves map position of a pariticular game unit.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitName"></a>DWORD GetUnitName(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>, LPSTR </b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns length of the unit
  name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive
    the unit's name.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                   
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieves name of a particular game unit.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitOwnerID"></a>DWORD GetUnitOwnerID(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns ID of the unit's owner if succeeds,
  -1 otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieves ID of the unit owner, only works for monsters.
  This can be used to determine whether a mercenary belongs to a player. Global
  units that do not have any owner will have -1(0xffffffff) as owner ID.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitClassID"></a>DWORD GetUnitClassID(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns class ID of the unit if succeeds,
  zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve<b> </b>class ID of a particular game unit.
  Class ID's identify units' base types.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitHPPercent"></a>BYTE GetUnitHPPercent(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns unit's remaining life percent.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve life percent of a particular game unit, return
  value ranges from 0 to 100.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitStat"></a>DWORD GetUnitStat(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>, int </b><i>nStatID</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns unit's stat value specified by <i>nStatID.</i></font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">nStatID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">ID of the stat to return. Please check <a href="definitions.htm#stat">Unit
    Stat Definition</a> for a complete list of unit stat ID's.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve a particular stat value of the unit. This
  function can be used to retrieve any unit stats such as HP, max HP, mana, max
  mana, magic find, IAS, fast run, fast cast, resists, absorbs, etc. You may
  even use this function to retrieve stats of other players, but do not abuse it
  and ruin the PVP!</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetUnitAffection"></a>BOOL GetUnitAffection(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>, int </b><i>nAffectionID</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the unit is affected by
  the affection specified by <i>nAffectionID</i>, zero otherwise<i>.</i></font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">nAffectionID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">ID of the affection. Please check <a href="definitions.htm#affection">Unit
    Affection Definition</a> for a complete list of unit affection ID's.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Check whether the unit is affected by a particular
  affection. Affections are states that can affect game units, such as poisoned,
  chilled, all passive skills, auras, etc.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetAffectionName"></a>DWORD GetAffectionName(BYTE                   
</b><i>iAffectionID</i><b>, LPTSTR </b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns length of the
  affection name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">nAffectionID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">ID of the affection. Please check <a href="definitions.htm#affection">Unit
    Affection Definition</a> for a complete list of unit affection ID's.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive
    the affection name.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                   
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Convert an affection into its string representation.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="AffectionIsAura"></a>BOOL AffectionIsAura(BYTE                   
</b><i>iAffectionID</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the affection is an
  aura, zero otherwise<i>.</i></font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">nAffectionID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">ID of the affection. Please check <a href="definitions.htm#affection">Unit
    Affection Definition</a> for a complete list of unit affection ID's.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Check whether an affection is an aura.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="IsMercUnit"></a>DWORD IsMercUnit(LPCGAMEUNIT </b><i>lpUnit</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns class ID of the merc,
  otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Determine whether a game unit is a merc and which merc
  type it is. Please check <a href="definitions.htm#mercclass">Merc Class ID</a>
  for a complete list of merc types.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetMonsterType"></a>int GetMonsterType(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns monster type of the unit if
  succeeds, zero otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Determine monster type of a particular unit, e.g.
  champion, minor, boss, etc. Please check <a href="definitions.htm#monstertype">Monster
  Types</a> for a complete list of monster types.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetMonsterAttributes"></a>DWORD      
GetMonsterAttributes(LPCGAMEUNIT                   
</b><i>lpUnit</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns a 
  combination of the monster attributes, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpUnit</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#GAMEUNIT">GAMEUNIT</a>
    struct.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve monster attributes, including boss 
  enchantments, boss auras, immunities. The return value will never be zero if 
  the monster exists even if it does not have any relevant attributes. You may 
  exam each attribute using the bit &quot;<i>&amp;</i>&quot; operator. Please 
  check <a href="definitions.htm#monsterattr">Monster Attributes</a> for a 
  complete list of monster attribute values.</font></p>
</blockquote>
<p><font face="Verdana" size="2"><b>Code Sample</b></font></p>
<blockquote>
  <p><font size="2" face="Courier New" color="#008000">//////////////////////////////////////////////////////////////<br>
  // We will be displaying Pindleskin's attributes on screen<br>
  //////////////////////////////////////////////////////////////</font></p>
  <p><font face="Courier New" size="2"><font color="#0000FF">GAMEUNIT</font> gu 
  = {0};<br>
  server-&gt;FindUnitByName(szName, <font color="#800080">UNIT_TYPE_MONSTER</font>, 
  &amp;gu); <font color="#008000">// Find Pindleskin</font><br>
  const <font color="#0000FF">DWORD</font> ATTR = 
  server-&gt;GetMonsterAttributes(&amp;gu); <font color="#008000">// Get its 
  attributes<br>
  </font>assert(ATTR); <font color="#008000">// ATTR will not be zero if 
  Pindleskin exists</font></font></p>
  <p><font face="Courier New" size="2"><font color="#008000">////////////////////////////////////////////////////<br>
  // Enchantments<br>
  ////////////////////////////////////////////////////</font><br>
  <font color="#0000FF">if</font> (ATTR &amp; <font color="#800080">MA_FIRE_ENCHANTED</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Fire enchanted&quot;);</font></p>     
  <p><font face="Courier New" size="2"><font color="#0000FF">if</font> (ATTR      
  &amp; <font color="#800080">MA_LIGHTNING_ENCHANTED</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Lightning enchanted&quot;);</font></p>     
  <p><font face="Courier New" size="2" color="#008000">// Other enchantments...</font></p>
  <p><font color="#008000" face="Courier New" size="2">////////////////////////////////////////////////////</font><font face="Courier New" size="2"><font color="#008000"><br>
  // Auras<br>
  ////////////////////////////////////////////////////</font><br>
  <font color="#0000FF">if</font> (ATTR &amp; <font color="#800080">MA_MIGHT</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Might&quot;);</font></p>     
  <p><font face="Courier New" size="2"><font color="#0000FF">if</font> (ATTR      
  &amp; <font color="#800080">MA_CONVICTION</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Conviction&quot;);</font></p>     
  <p><font face="Courier New" size="2"><font color="#0000FF">if</font> (ATTR      
  &amp; <font color="#800080">MA_FANATICISM</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Fanaticism&quot;);</font></p>     
  <p><font face="Courier New" size="2" color="#008000">// Other auras...</font></p>
  <p><font color="#008000" face="Courier New" size="2">////////////////////////////////////////////////////</font><font face="Courier New" size="2"><font color="#008000"><br>
  // Immunities<br>
  ////////////////////////////////////////////////////</font><br>
  <font color="#0000FF">if</font> (ATTR &amp; <font color="#800080">MA_IMMUNE_FIRE</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Immune to fire&quot;);</font></p>     
  <p><font face="Courier New" size="2"><font color="#0000FF">if</font> (ATTR      
  &amp; <font color="#800080">MA_IMMUNE_PHYSICAL</font>)<br>     
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintInfo(&quot;Immune to physical&quot;);</font></p>     
  <p><font face="Courier New" size="2" color="#008000">// Other immunities...</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetDistance"></a>DWORD GetDistance(WORD </b><i>x1</i><b>, WORD                   
</b><i>y1</i><b>, WORD </b><i>x2</i><b>, WORD </b><i>y2</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns distance, in yards, between two map
  positions.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">x1, y1</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the first map position.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>x2, y2</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the second map position.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Calculate map position distance, in yards.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="SendKey"></a>BOOL SendKey(BYTE </b><i>iVKCode</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">iVKCode</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Virtual key code of the key which is being sent.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Simulate a key press event in the game.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetSpellName"></a>DWORD GetSpellName(WORD </b><i>wSpell</i><b>, LPSTR                   
</b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns length of the spell
  name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">wSpell</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the spell ID. Please check <a href="definitions.htm#spell">Spell
    Definition</a> for a complete list of spell ID's.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive
    the spell name.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                   
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve name of a spell.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetMapName"></a>DWORD GetMapName(BYTE </b><i>iMapID</i><b>, LPTSTR                   
</b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns length of the map
  name, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">iMapID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the map ID. Please check <a href="definitions.htm#map">Map
    definition</a> for a complete list of map ID's.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive
    the map name.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                   
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve name of a map.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="MapIsTown"></a>BOOL MapIsTown(BYTE </b><i>iMapID</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the map is a town, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">iMapID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the map ID. Please check <a href="definitions.htm#map">Map
    definition</a> for a complete list of map ID's.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Check whether a map is a town.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetTownMap"></a>BYTE GetTownMap(BYTE </b><i>iAct</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns a map ID if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">iAct</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the act, act number is zero-based, so 0
    represents act 1, 1 represents act 2, and so on.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve the town map ID of an act.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetActFromMap"></a>BYTE GetActFromMap(BYTE </b><i>iMapID</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns act number of the given map.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">iMapID</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the map ID. Please check <a href="definitions.htm#map">Map
    definition</a> for a complete list of map ID's.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Determine which act the particular map belongs to.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetItemSize"></a>SIZE GetItemSize(LPCSTR </b><i>lpszItemCode</i><b>);</b></font></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns size of an item.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpszItemCode</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which represents
    the 3-letter item code.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Determine size of an item.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetD2WindowTitle"></a>DWORD GetD2WindowTitle(LPSTR                   
</b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns number of characters
  copied to the buffer, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive
    the window title.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                   
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve D2 game window title.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetInGameTime"></a>DWORD GetInGameTime();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns total elapsed time, in
  milliseconds, since the player joined the game.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve current game length.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetGameDifficulty"></a>int GetGameDifficulty();</font></b></p>                   
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns difficulty of current
  game, otherwise it returns zero.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve game difficulty, if succeeded, the return value
  can be 1(normal), 2(nightmare), or 3(hell).</font></p>
</blockquote>
<hr noshade size="1">
<p><font size="2"><b><font face="Verdana"><a name="EnumPresetUnits"></a>BOOL EnumPresetUnits(fnEnumPresetUnitProc               
</font></b><font face="Verdana"><i>lpfnEnumPresetUnitProc</i><b>, LPARAM </b><i> lParam</i><b> = 0);</b></font></font></p> 
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><font size="2"><font face="Verdana"><i>lpfnEnumPresetUnitProc</i></font></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a </font><a href="#fnEnumPresetUnitProc"><font face="Verdana" size="2">fnEnumPresetUnitProc</font></a><font face="Verdana" size="2"> 
    function which will received preset-unit data.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lParam</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">A 32-bit application defined value.</font></p> 
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Enumerate all preset-units in current map.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="fnEnumPresetUnitProc"></a>typedef BOOL (CALLBACK *fnEnumPresetUnitProc)(LPCPRESETUNIT               
</b><i>lpPresetUnit</i><b>, LPARAM </b><i>lParam</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Return zero to abort preset-unit enumeration, return non-zero 
  to continue.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>lpPresetUnit</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#presetunit">PRESETUNIT</a> 
    struct which will receive the preset-unit data.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lParam</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">A 32-bit application defined value.</font></p> 
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Process each preset-unit data passed from <i><a href="#EnumPresetUnit">EnumPresetUnit</a>.</i></font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="CalculateTeleportPath"></a>DWORD </b></font><font size="2"><b><font face="Verdana">CalculateTeleportPath(WORD               
</font></b><font face="Verdana"><i>x</i><b>, WORD </b><i>y</i><b>, LPPATH </b><i>lpBuffer</i><b>);</b></font></font></p>
<p><font face="Verdana" size="2"><b>Return Value</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns number of 
  path node calculated, otherwise it returns zero.</font></p>
</blockquote>
<p><font face="Verdana" size="2"><b>Parameters</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>x, y</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the destination map position.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>lpBuffer</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#path">PATH</a>  
    struct which will receive the calculated path data.</font></p> 
  </blockquote>
</blockquote>
<p><font face="Verdana" size="2"><b>Remarks</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">Calculate all required steps from the  
  player's current map position to the destination map position specified by <i>x</i>  
  and <i>y</i>. This function can be extremely handy for finding a path from one 
  position to another, for example, finding the path from Durance of hate level 2 waypoint  
  to the Durance of hate level 3 entrance, whose map position can be obtained by  
  a previous call to <i><a href="#EnumPresetUnit">EnumPresetUnit</a>.</i></font></p> 
  <p><font face="Verdana" size="2">Please note that path calculated by this 
  function does not take into account obstacle(monsters, chests, closed 
  doorways, etc), so it is recommended to be used for players with the Teleport 
  spell.</font></p>
</blockquote>
<p><font face="Verdana" size="2"><b>Code Sample</b></font></p>
<blockquote>
  <p><font face="Courier New" size="2" color="#008000">/////////////////////////////////////////////////////////////////////<br>
  // Calculate a path and teleport there<br>
  /////////////////////////////////////////////////////////////////////<br>
  <br>
  // Suppose we have already obtained a PRESETUNIT named &quot;pu&quot; from a  
  previous call to EnumPresetUnit </font></p> 
  <p><font face="Courier New" size="2"><font color="#0000FF">PATH</font> path = { 0 };<br>             
  <font color="#0000FF">    
  if</font> (!server-&gt;CalculateTeleportPath(pu.x, pu.y, &amp;path)<br>             
  {<br>
  &nbsp;&nbsp;&nbsp; server-&gt;GamePrintError(&quot;Failed to calculate              
  path!&quot;);<br>
  }<br>
  <font color="#0000FF">
  else</font><br>
  {<br>
  &nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> (<font color="#0000FF">BYTE</font> i = 0; i &lt; path.iNodeCount; i++)<br>             
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              
  me-&gt;TeleportTo(path.aPathNodes[i].x, path.aPathNodes[i].y, <font color="#0000FF">TRUE</font>);<br>            
  }<br>
  <br>
  <font color="#008000">
  // Now wait for the PM_MOVECOMPLETE message...</font></font></p>       
</blockquote>
<hr noshade size="1">
  <p><font face="Verdana" size="2"><b><a name="CalculateWalkPath"></a>DWORD 
  CalculateWalkPath(WORD </b><i>x</i><b>, WORD </b><i>y</i><b>, LPPATH </b><i>lpBuffer</i><b>);</b></font></p>      
<p><font face="Verdana" size="2"><b>Return Value</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns number of 
  path node calculated, otherwise it returns zero.</font></p>
</blockquote>
<p><font face="Verdana" size="2"><b>Parameters</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>x, y</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the destination map position.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>lpBuffer</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a <a href="structs.htm#path">PATH</a>  
    struct which will receive the calculated path data.</font></p> 
  </blockquote>
</blockquote>
<p><font face="Verdana" size="2"><b>Remarks</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">Calculate all required steps from the   
  player's current map position to the destination map position specified by <i>x</i>   
  and <i>y</i>. This function is similar to <a href="#CalculateTeleportPath">CalculateTeleportPath</a> 
  except for that it takes into acount map obstacles and collisions. Usually 
  used for town walking.</font></p> 
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetItemCode"></a>BOOL              
GetItemCode(DWORD </b><i>dwItemID</i><b>, LPSTR </b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>             
<p><font face="Verdana" size="2"><b>Return Value</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero
  otherwise.</font></p>
</blockquote>
<p><font face="Verdana" size="2"><b>Parameters</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>dwItemID</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the item ID.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>lpszBuffer</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated buffer which 
    will receive the item code.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>dwMaxChars</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum number of characters 
    that can be copied to </font><font face="Verdana" size="2"><i>lpszBuffer</i>. 
    The value shall be no less than 4.</font></p>
  </blockquote>
</blockquote>
<p><font face="Verdana" size="2"><b>Remarks</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve the 3-letter item code of the item 
  specified by </font><font face="Verdana" size="2"><i>dwItemID</i>.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="LeftClick"></a>BOOL LeftClick(long </b><i>x</i><b>,             
long </b><i>y</i><b>);<br>
<a name="RightClick"></a>BOOL RightClick(long </b><i>x</i><b>, long </b><i>y</i><b>);</b></font></p>            
<p><font face="Verdana" size="2"><b>Return Value</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if succeeds, zero 
  otherwise.</font></p>
</blockquote>
  <p><font face="Verdana" size="2"><b>Parameters</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>x</i>, <i>y</i></font></p>
  <blockquote>
  <p><font face="Verdana" size="2">Specifies the client coordinates where the 
  mouse click shall occur.</font></p>
  </blockquote>
</blockquote>
  <p><font face="Verdana" size="2"><b>Remarks</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">Simulate a mouse-click on the game client 
  area.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="QueryModuleData"></a>DWORD        
QueryModuleData(LPCSTR </b><i>lpszModuleName</i><b>, DWORD </b><i>dwDataID</i><b>,        
LPVOID </b><i>lpBuffer</i><b>, DWORD </b><i>dwMaxLength</i><b>, LPARAM </b><i>lParam</i><b> 
= 0);</b></font></p>
<p><font face="Verdana" size="2"><b>Return Value</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns number of 
  bytes that were actually copied to <i>lpBuffer</i>, otherwise it returns zero.</font></p>
</blockquote>
  <p><font face="Verdana" size="2"><b>Parameters</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>lpszModuleName</i></font></p>
  <blockquote>
  <p><font face="Verdana" size="2">Specifies name of the target module. Module 
  extension is not included, for example, if you want to query data from the 
  module &quot;<i>pickit.d2h</i>&quot;, you must specify &quot;<i>pickit</i>&quot; 
  as the target module name.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>dwDataID</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the iddentity of the data to be 
    queried. This value must had been defined in the target module.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>lpBuffer</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a memory block, to where the 
    target module will write the data if the query is successful.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>dwMaxLength</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specify maximum data length, in bytes, that 
    can be written to <i>lpBuffer. </i>The return value of this function will 
    never exceed <i>dwMaxLength.</i></font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>lParam</i><b>&nbsp;</b></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies additional information to the       
    target module on how the data should be queried. Assuming the caller and the       
    target module have already made agreement on how <i>lParam</i><b> </b>is       
    defined.</font></p>
  </blockquote>
</blockquote>
  <p><font face="Verdana" size="2"><b>Remarks</b></font></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve some particular data or information 
  from the target module specified by <i>lpszModuleName</i>. This function fails 
  if any of the following conditions are true:</font></p>
  <ul>
    <li><font face="Verdana" size="2">The target module cannot be found (was not 
      loaded by D2Hackit).</font></li>
    <li><font size="2" face="Verdana">The target module did not export or 
      implement the &quot;<i>OnQueryModuleData</i>&quot; function.</font></li>
    <li><font size="2" face="Verdana">Meanings of <i>dwDataID</i> or <i>lParam</i><b> 
      </b>cannot be recognized by the target module.</font></li>
    <li><font size="2" face="Verdana">The target module does not agree to expose 
      the required data to the caller.</font></li>
  </ul>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetKeyName"></a>DWORD GetKeyName(BYTE       
</b><i>iKeyCode</i><b>, LPSTR </b><i>lpszBuffer</i><b>, DWORD </b><i>dwMaxChars</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p> 
<blockquote>
  <p><font face="Verdana" size="2">If succeeded, the function returns length of the 
  key name, otherwise it returns zero.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>iKeyCode</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the virtual key code.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">lpszBuffer</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Pointer to a null-terminated string which will receive 
    the key name.</font></p>
  </blockquote>
  <p><i><font face="Verdana" size="2">dwMaxChars</font></i></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the maximum buffer size, in char's.&nbsp;</font></p>                  
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Retrieve name of a key whose virtual key code 
  value is specified by <i>iKeyCode</i>.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="IsQuestItem"></a>BOOL IsQuestItem(LPCSTR    
</b><i>lpszItemCode</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>  
<blockquote>
  <p><font face="Verdana" size="2">The function returns non-zero if the 
  specified item is a quest item, zero otherwise.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2"><i>lpszItemCode</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specifies the item code.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
  <p><font face="Verdana" size="2">Check whether the specified item is a quest 
  item.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetTextSize"></a>SIZE GetTextSize(LPCSTR </b><i>lpszText</i><b>, int                
</b><i>nFont</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns size of the specified text using specified font.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><i><font face="Verdana" size="2">lpszText</font></i></p>
  <blockquote>
<p><font face="Verdana" size="2">Pointer to a null-terminated string whose size is to be calculated.&nbsp;</font></p>                
  </blockquote>
<p><i><font face="Verdana" size="2">nFont</font></i></p>
  <blockquote>
<p><font face="Verdana" size="2">Specifies the font value, using which the text will be calculated. Please
check <a href="definitions.htm#font">game fonts</a> for a complete list of
available game font.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Calculate drawing size of a string.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetScreenSize"></a>SIZE GetScreenSize();&nbsp;</font></b></p>                
<p><b><font face="Verdana" size="2">Return Value</font></b></p>                
<blockquote>
<p><font face="Verdana" size="2">The function returns size of the game window client area.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Calculate size of the game window client area, the return value will be 
either {800, 600} or {640, 480}. No other sizes are defined.</font></p> 
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="ScreenToMapCoords"></a>POINT ScreenToMapCoords(POINT </b><i>ptScreenCoords</i><b>);</b></font></p>                
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns the game map position value.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><i><font face="Verdana" size="2">ptScreenCoords</font></i></p>
  <blockquote>
<p><font face="Verdana" size="2">Screen coordinates.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Translate a screen coordinates into an absolute game map position.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="MapToScreenCoords"></a>POINT 
MapToScreenCoords(POINT </b><i>ptMapPosition</i><b>);</b></font></p>               
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns the screen coordinates value.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><font face="Verdana" size="2"><i>ptMapPosition</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Absolute game 
map position.</font></p> 
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Translate an absolute game map position into a screen coordinates.</font></p>
</blockquote>
<hr noshade size="1">
<p><b><font face="Verdana" size="2"><a name="GetMousePosition"></a>POINT GetMousePosition();</font></b></p>                
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns current mouse position.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Retrieve current mouse position in the game client area.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetRandomPosition"></a>POINT 
GetRandomPosition(int </b><i>nRadiusMin</i><b>, int </b><i>nRadiusMax</i><b>, 
int </b><i>nAngleMin</i><b> = 0, int </b><i>nAngleMax</i><b> = 360, const 
LPPOINT </b><i>lpOrigin</i><b> = NULL);</b></font></p> 
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns the calculated result.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><font face="Verdana" size="2"><i>nRadiusMin, nRadiusMax</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Specify the minimum and maximum radius, in 
yards, from the origin point.</font></p>
  </blockquote>
  <p><font face="Verdana" size="2"><i>nAngleMin, nAngleMax</i></font></p>
  <blockquote>
    <p><font face="Verdana" size="2">Specify the angles, in degrees, from the  
    origin point. Angles values may range from 0 to 360.</font></p>
  </blockquote>
</blockquote>
<blockquote>
<p><font face="Verdana" size="2"><i>lpOrigin</i><b>&nbsp;</b></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Pointer to a POINT struct  
specifies the origin point from where a random position is to be calculated. If  
this parameter is null, the player's current position will be used as the origin  
point.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Calculates for a random position within the  
specified radius and angles. Please note that if the origin point specified by  
lpOrigin is not a valid map position, then the return value will not be a valie  
map position, either. However, even if this is the case, the function will not  
fail since it merely performs a mathematical calculation.</font></p> 
<p><font face="Verdana" size="2">This function could be extremely useful in some 
circumstances, for example, D2Hackit uses this function in its internal 
motion-queue to detour around small obstacles.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetAngle"></a>int GetAngle(WORD </b><i>x1</i><b>, 
WORD </b><i>y1</i><b>, WORD </b><i>x2</i><b>, WORD </b><i>y2</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns calculated angle 
value(0-360).</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><font face="Verdana" size="2"><b>&nbsp;</b><i>x1, y1</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Specifiy the starting position.</font></p>
  </blockquote>
<p><font face="Verdana" size="2"><i>x2, y2</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Specifiy the ending position.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Calculates the angle value(0-360) between the 
starting position and the ending position.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="CreateCollisionMap"></a>BOOL 
CreateCollisionMap();</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">The function returns non-zero if the collision 
map was created successfully, zero otherwise.</font></p> 
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Create a collision map against current map. A 
collision map is treated as an 1000*1000 two-dimensional array which stores all 
collision data of current map.</font></p>
<p><font face="Verdana" size="2">If the collision map of current map was already 
created period to this call, the function returns non-zero immediately without 
recreating it.</font></p>
<p><font face="Verdana" size="2">Collision map will be destroyed automatically 
as soon as current map is changed(the player enters a new area) and D2Hackit 
will not recreate it, you need to manually call this function at least once 
after every map change in order to be able to access collision data of the new 
map.</font></p>
</blockquote>
<hr noshade size="1">
<p><font face="Verdana" size="2"><b><a name="GetCollisionData"></a>WORD 
GetCollisionData(long </b><i>x</i><b>, long </b><i>y</i><b>, BOOL </b><i>bAbsolute</i><b>);</b></font></p>
<p><b><font face="Verdana" size="2">Return Value</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Is succeeded, the function returns the 
specified collision data, otherwise it returns -1.</font></p>
</blockquote>
<p><b><font face="Verdana" size="2">Parameters</font></b></p>
<blockquote>
<p><font face="Verdana" size="2"><b>&nbsp;</b><i>x, y</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Specifiy the location, at which the collision 
data is to e retrieved.</font></p>
  </blockquote>
<p><font face="Verdana" size="2"><i>bAbsolute</i></font></p>
  <blockquote>
<p><font face="Verdana" size="2">Specifies whether the location specified by <i>x</i> 
and <i>y</i> is an absolute game map position or a relative index.</font></p>
  </blockquote>
</blockquote>
<p><b><font face="Verdana" size="2">Remarks</font></b></p>
<blockquote>
<p><font face="Verdana" size="2">Retrieves the collision data at a particular 
position.</font></p>
<p><font face="Verdana" size="2">If <i>bAbsolute </i>is non-zero, <i>x</i> and <i>y</i> 
are treated as an absolute game map position. If <i>bAbsolute </i>is zero, <i>x</i> 
and <i>y</i> are treated as a relative index, in this case values of <i>x</i> 
and <i>y</i> must be in range of 0 to 999, since the collision map is an 
1000*1000 two-dimensional array.</font></p>
</blockquote>
<hr noshade size="1">
