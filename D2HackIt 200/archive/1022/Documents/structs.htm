
<p align="center"><font face="Arial Black">Game Structs</font></p>

<pre>
<a name="MAPPOS"></a>////////////////////////////////////////////////////////////////////
// D2 Game Map Position
////////////////////////////////////////////////////////////////////
typedef struct tagMapPos
{
	WORD x;				// x
	WORD y;				// y
} MAPPOS, *LPMAPPOS;
typedef const tagMapPos* LPCMAPPOS;


<a name="D2DRAWDATA"></a>////////////////////////////////////////////////////////////////////
// Stuff for Screen Text Drawing
// Added v2.00 by Abin
////////////////////////////////////////////////////////////////////

// Drawing Capacities
#define D2DRAW_MAX_TEXT		255 // Maximum text length that can be drawn in one element
#define D2DRAW_MAX_DATA		64  // Maximum elements can be drawn on the screen at a time
#define D2DRAW_TEXT			0	// Draw text on screen
#define D2DRAW_LINE			1	// Draw a line on screen
#define D2DRAW_RECT			2	// Draw a rectangle on screen

// Drawing Element Data Definition
typedef struct tagD2DrawData
{
	// Common stuff	
	int nDrawType;					  // D2DRAW_TEXT, D2DRAW_LINE, D2DRAW_RECT
	int nColor;						  // Color
	long x;							  // Screen coordinates x
	long y;							  // Screen coordinates y

	// Stuff for text drawing
	char szText[D2DRAW_MAX_TEXT + 1]; // Text to be drawn
	BOOL bRightAlign;				  // Right alignment	
	int nFont;						  // Text font(0-13)

	// Stuff for line & rectangle drawing
	long x2;						  // Bottom-right screen coordinates x
	long y2;						  // Bottom-right screen coordinates y	
	int nTransparency;				  // Transparency(D2DRAW_RECT only), 0:Transparent, 1-254:Translucent, -1:Opaque
} D2DRAWDATA, *LPD2DRAWDATA;
typedef const tagD2DrawData* LPCD2DRAWDATA;


<a name="fnEnumItemProc"></a>//////////////////////////////////////////////////////////////////////
// Item Enumeration Callback Function def
//////////////////////////////////////////////////////////////////////
typedef BOOL (CALLBACK *fnEnumItemProc)(DWORD dwItemID, LPARAM lParam); 



<a name="GAMEUNIT"></a>typedef struct tagGameUnit
{
	DWORD dwUnitID;					// Unit ID
	DWORD dwUnitType;				// Unit type(player, monster, object, etc)
} GAMEUNIT, *LPGAMEUNIT;
typedef const tagGameUnit* LPCGAMEUNIT;

<a name="fnEnumUnitProc"></a>// Unit enumeration callback definition
typedef BOOL (CALLBACK *fnEnumUnitProc)(LPCGAMEUNIT lpUnit, LPARAM lParam);</pre>

<pre>//////////////////////////////////////////////////////////////////////
// PresetUnit(Caves, Stairs, Dens, Towers, Entrances, Izual, Hephasto, Countess Chest, etc...)
//////////////////////////////////////////////////////////////////////
<a name="presetunit"></a>typedef struct tagPresetUnit
{
	DWORD dwID;		// Preset unit ID (txt no). 
	DWORD dwType;		// Preset unit type, monster, object, room tile, etc
	WORD x;			// Map position x
	WORD y;			// Map position y
} PRESETUNIT, *LPPRESETUNIT;
typedef const tagPresetUnit* LPCPRESETUNIT;

// PresetUnit enumeration callback definition
typedef BOOL (CALLBACK *fnEnumPresetUnitProc)(LPCPRESETUNIT lpPresetUnit, LPARAM lParam);


/////////////////////////////////////////////////////////////////////
// Path (path from one position to an other)
/////////////////////////////////////////////////////////////////////
<a name="path"></a>typedef struct tagPath
{
	MAPPOS posStart;				// Start position
	MAPPOS posEnd;				// Destination position
	MAPPOS aPathNodes[255];			// Path nodes between posStart and posEnd
	BYTE iNodeCount;				// Number of path nodes (0-255)
} PATH, *LPPATH;
typedef const tagPath* LPCPATH;</pre>