
<p align="center"><font face="Arial Black">Game Structs</font></p>

<pre>
<a name="MAPPOS"></a>////////////////////////////////////////////////////////////////////
// D2 Game Map Position
////////////////////////////////////////////////////////////////////
typedef struct tagMapPos
{
	WORD x;				// x
	WORD y;				// y
} MAPPOS, *LPMAPPOS;
typedef const tagMapPos* LPCMAPPOS;


<a name="D2DRAWDATA"></a>////////////////////////////////////////////////////////////////////
// Stuff for Screen Text Drawing
// Added v2.00 by Abin
////////////////////////////////////////////////////////////////////

// Drawing Capacities
#define D2DRAW_MAX_TEXT		255 // Maximum text length that can be drawn in one element
#define D2DRAW_MAX_DATA		64  // Maximum elements can be drawn on the screen at a time

// Drawing Element Data Definition
typedef struct tagD2DrawData
{
	char szText[D2DRAW_MAX_TEXT + 1]; 		  // Text to be drawn
	BOOL bRightAlign;				  // Right alignment
	long x;						  // Screen coordinates x
	long y;						  // Screen coordinates y
	int nFont;					  // Text font(0-13)
} D2DRAWDATA, *LPD2DRAWDATA;
typedef const tagD2DrawData* LPCD2DRAWDATA;


<a name="ITEMMOD"></a>#define	ITEM_CODE_LEN					3
#define	ITEM_DESC_LEN					128
#define ITEM_MAX_MOD	25
typedef struct tagItemMod
{
	DWORD dwModID;			// mod id
	BYTE iCount;			// number of values
	DWORD aValues[4];		// mod values
} ITEMMOD, *LPITEMMOD;
typedef const tagItemMod* LPCITEMMOD;

<a name="ITEM"></a>// The ITEM struct
typedef struct tagItem
{
	DWORD dwItemID;							// item ID
	BYTE iMessageID;						// 0x9c/0x9d
	BYTE iAction;							// action
	BYTE iType;								// type: weapon, armor, etc
	BYTE iIsSocketFull;						// is sockets full?
	BYTE iSocketNumber;						// number of total sockets on this item
	BYTE iSwtichIn;							// switched in?
	BYTE iSwitchOut;						// switched out?
	BYTE iBroken;							// item is broken
	BYTE iIdentified;						// identified?
	BYTE iEthereal;							// ethereal?
	BYTE iLevel;							// item level
	BYTE iLocation;							// ground, belt, inventory etc
	BYTE iPersonalized;						// personalized
	BYTE iRuneword;							// is runeword item
	BYTE iGamble;							// gamble
	BYTE iStorageID;						// storage id
	BYTE iQuality;							// unique, rare, set, superior, etc
	WORD wPositionX;						// location x
	WORD wPositionY;						// location y
	DWORD dwGoldAmount;						// Gold amount, &quot;gld&quot; only
	char szItemCode[ITEM_CODE_LEN + 1];		// item code, 3 letters
	WORD wDefense;							// defense
	WORD wDurability;						// durability
	WORD wMaxDurability;					// maximum durability
	BYTE iModCount;							// number of total mods
	BYTE iAtBeltRow;						// belt row index(0-4)
	BYTE iAtBeltColumn;						// belt column index(0-4)
	BYTE iGemmedNumber;						// gemmed number
	WORD wMagicPrefix;						// magic prefix
	WORD wMagicSuffix;						// magic suffix
	WORD wRarePrefix;						// rare prefix
	WORD wRareSuffix;						// rare suffix
	WORD wUniqueID;							// unique id
	WORD wSetID;							// set id
	//WORD wRuneWordID;						// runeword id
	ITEMMOD aMods[ITEM_MAX_MOD];			// mods
} ITEM, *LPITEM;
typedef const tagItem* LPCITEM;


<a name="fnEnumItemProc"></a>//////////////////////////////////////////////////////////////////////
// Item Enumeration Callback Function def
//////////////////////////////////////////////////////////////////////
typedef BOOL (CALLBACK *fnEnumItemProc)(LPCITEM lpItem, LPARAM lParam); 



<a name="GAMEUNIT"></a>typedef struct tagGameUnit
{
	DWORD dwUnitID;					// Unit ID
	DWORD dwUnitType;				// Unit type(player, monster, object, etc)
} GAMEUNIT, *LPGAMEUNIT;
typedef const tagGameUnit* LPCGAMEUNIT;

<a name="fnEnumUnitProc"></a>// Unit enumeration callback definition
typedef BOOL (CALLBACK *fnEnumUnitProc)(LPCGAMEUNIT lpUnit, LPARAM lParam);</pre>

<pre>//////////////////////////////////////////////////////////////////////
// PresetUnit(Caves, Stairs, Dens, Towers, Entrances, Izual, Hephasto, Countess Chest, etc...)
//////////////////////////////////////////////////////////////////////
<a name="presetunit"></a>typedef struct tagPresetUnit
{
	DWORD dwID;		// Preset unit ID (txt no). 
	DWORD dwType;		// Preset unit type, monster, object, room tile, etc
	WORD x;			// Map position x
	WORD y;			// Map position y
} PRESETUNIT, *LPPRESETUNIT;
typedef const tagPresetUnit* LPCPRESETUNIT;

// PresetUnit enumeration callback definition
typedef BOOL (CALLBACK *fnEnumPresetUnitProc)(LPCPRESETUNIT lpPresetUnit, LPARAM lParam);


/////////////////////////////////////////////////////////////////////
// Path (path from one position to an other)
/////////////////////////////////////////////////////////////////////
<a name="path"></a>typedef struct tagPath
{
	MAPPOS posStart;				// Start position
	MAPPOS posEnd;				// Destination position
	MAPPOS aPathNodes[255];			// Path nodes between posStart and posEnd
	BYTE iNodeCount;				// Number of path nodes (0-255)
} PATH, *LPPATH;
typedef const tagPath* LPCPATH;</pre>